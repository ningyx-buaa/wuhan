var echarts = require("echarts/lib/echarts");

var graphicGL = require("../../util/graphicGL");

var retrieve = require("../../util/retrieve");

var format = require("../../util/format");

var PointsBuilder = require("../common/PointsBuilder");

echarts.extendChartView({
  type: 'scatter3D',
  __ecgl__: true,
  init: function (ecModel, api) {
    this.groupGL = new graphicGL.Node();
    var pointsBuilder = new PointsBuilder(false, api);
    this._pointsBuilder = pointsBuilder;
  },
  render: function (seriesModel, ecModel, api) {
    this.groupGL.add(this._pointsBuilder.rootNode);
    var coordSys = seriesModel.coordinateSystem;

    if (coordSys && coordSys.viewGL) {
      coordSys.viewGL.add(this.groupGL);

      this._pointsBuilder.update(seriesModel, ecModel, api);

      this._pointsBuilder.updateView(coordSys.viewGL.camera);

      this._camera = coordSys.viewGL.camera;
    } else {}
  },
  updateLayout: function (seriesModel, ecModel, api) {
    this._pointsBuilder.updateLayout(seriesModel, ecModel, api);

    this._pointsBuilder.updateView(this._camera);
  },
  updateCamera: function () {
    this._pointsBuilder.updateView(this._camera);
  },
  highlight: function (seriesModel, ecModel, api, payload) {
    this._toggleStatus('highlight', seriesModel, ecModel, api, payload);
  },
  downplay: function (seriesModel, ecModel, api, payload) {
    this._toggleStatus('downplay', seriesModel, ecModel, api, payload);
  },
  _toggleStatus: function (status, seriesModel, ecModel, api, payload) {
    var data = seriesModel.getData();
    var dataIndex = retrieve.queryDataIndex(data, payload);
    var pointsBuilder = this._pointsBuilder;

    if (dataIndex != null) {
      echarts.util.each(format.normalizeToArray(dataIndex), function (dataIdx) {
        status === 'highlight' ? pointsBuilder.highlight(data, dataIdx) : pointsBuilder.downplay(data, dataIdx);
      }, this);
    } else {
      data.each(function (dataIdx) {
        status === 'highlight' ? pointsBuilder.highlight(data, dataIdx) : pointsBuilder.downplay(data, dataIdx);
      });
    }
  },
  dispose: function () {
    this.groupGL.removeAll();
  },
  remove: function () {
    this.groupGL.removeAll();
  }
});